// 保存當前的刪除回調函數
let currentDeleteCallback = null;

// 當前選中的期數
let currentPeriod = 1;

// 從 localStorage 獲取保存的書籍資料，如果沒有則使用預設資料
let books = JSON.parse(localStorage.getItem('books')) || [
    {
        id: 1,
        period: 1,
        title: "蒼鷺與少年",
        author: "宮崎駿",
        presenter: "小花",
        summary: "一個關於成長、友誼與環保的故事",
        reviews: [
            {
                id: 1,
                reviewer: "小明",
                rating: 5,
                comment: "這是一部充滿想像力的作品，探討了人與自然的關係。\n\n特別喜歡裡面對環境議題的探討，以及主角與蒼鷺之間的互動。",
                fullReviewUrl: "reviews/review1.html"
            },
            {
                id: 2,
                reviewer: "小華",
                rating: 4,
                comment: "故事情節引人入勝，但結局稍嫌倉促。",
                fullReviewUrl: "reviews/review2.html"
            }
        ]
    },
    {
        id: 2,
        period: 1,
        title: "挪威的森林",
        author: "村上春樹",
        presenter: "小天",
        summary: "青春、愛情與失落的故事",
        reviews: [
            {
                id: 3,
                reviewer: "小美",
                rating: 5,
                comment: "非常觸動人心的故事，描寫得很細膩。",
                fullReviewUrl: "reviews/review3.html"
            }
        ]
    },
    {
        id: 3,
        period: 5,
        title: "原子習慣",
        author: "詹姆斯．克利爾",
        presenter: "阿智",
        summary: "這是一本關於習慣養成的實用指南。\n\n書中詳細解釋了好習慣的養成過程，並提供了許多實用的方法和技巧。\n\n作者以科學研究為基礎，說明了微小改變如何累積成巨大的成果。",
        reviews: [
            {
                id: 4,
                reviewer: "小玉",
                rating: 5,
                comment: "這本書徹底改變了我對習慣養成的認知！\n\n特別喜歡書中提到的「1% 改善法則」，讓我明白持續小改變的重要性。",
                fullReviewUrl: "reviews/review4.html"
            },
            {
                id: 5,
                reviewer: "大雄",
                rating: 4,
                comment: "內容很實用，但有些部分略顯重複。\n不過整體來說值得一讀，尤其是關於環境設計對習慣養成的影響那一章。",
                fullReviewUrl: "reviews/review5.html"
            },
            {
                id: 6,
                reviewer: "靜香",
                comment: "這本書給了我很多啟發，特別是在建立新習慣的方法上。雖然我還沒完全實踐，但已經開始按照書中的建議做一些改變了。",
                fullReviewUrl: "reviews/review6.html"
            }
        ]
    }
];

// 初始化頁面
document.addEventListener('DOMContentLoaded', () => {
    // 清除舊資料（如果需要重置資料，取消下面這行的註解）
    // localStorage.removeItem('books');
    
    // 設置當前期數為 5，以顯示範例資料
    currentPeriod = 5;
    
    setupPeriodNavigation();
    displayBooks();
    setupEventListeners();
    
    // 更新期數按鈕的活動狀態
    document.querySelectorAll('.period-btn').forEach(btn => {
        if (parseInt(btn.dataset.period) === currentPeriod) {
            btn.classList.add('active');
        }
    });
});

// 設置期數導航
function setupPeriodNavigation() {
    document.querySelector('.period-nav').addEventListener('click', (e) => {
        if (e.target.classList.contains('period-btn')) {
            // 更新活動狀態
            document.querySelectorAll('.period-btn').forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');
            
            // 更新當前期數並重新顯示書籍
            currentPeriod = parseInt(e.target.dataset.period);
            displayBooks();
        }
    });
}

// 顯示書籍列表
function displayBooks() {
    const bookList = document.getElementById('bookList');
    const filteredBooks = books.filter(book => book.period === currentPeriod);
    // 計算平均評分的函數
    function calculateAverageRating(reviews) {
        const ratingsWithoutNull = reviews.filter(review => review.rating !== null);
        if (ratingsWithoutNull.length === 0) return null;
        const sum = ratingsWithoutNull.reduce((acc, review) => acc + review.rating, 0);
        return (sum / ratingsWithoutNull.length).toFixed(1);
    }

    // 生成星星評分的HTML
    function generateStarRating(rating) {
        if (rating === null) return '';
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating - fullStars >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
        
        return `
            ${'★'.repeat(fullStars)}${hasHalfStar ? '⯨' : ''}${'☆'.repeat(emptyStars)}
            <span class="rating-number">${rating}</span>
        `;
    }

    bookList.innerHTML = filteredBooks.map(book => {
        return `
        <div class="book-card" data-book-id="${book.id}">
            <button class="delete-button delete-book-button" data-book-id="${book.id}">刪除</button>
            <h2 class="book-title">${book.title}</h2>
            <p class="book-author">作者：${book.author}</p>
            <p class="book-presenter">出書人：${book.presenter}</p>
            <p class="book-summary">${book.summary}</p>
            <p class="review-count">📚 ${book.reviews.length} 則評價</p>
        </div>
    `}).join('');
}

// 設置事件監聽器
function setupEventListeners() {
    // 書籍卡片點擊事件
    document.getElementById('bookList').addEventListener('click', (e) => {
        console.log('Card clicked', e.target);
        
        if (e.target.classList.contains('delete-book-button')) {
            console.log('Delete button clicked');
            e.stopPropagation();
            const bookId = parseInt(e.target.dataset.bookId);
            showConfirmDialog('確定要刪除這本書嗎？', () => deleteBook(bookId));
        } else {
            const bookCard = e.target.closest('.book-card');
            console.log('Found book card:', bookCard);
            
            if (bookCard && !e.target.classList.contains('delete-book-button')) {
                e.preventDefault();
                const bookId = parseInt(bookCard.dataset.bookId);
                console.log('Opening details for book ID:', bookId);
                showBookDetails(bookId);
            }
        }
    });

    // 新增書籍按鈕點擊事件
    document.getElementById('addBookBtn').addEventListener('click', () => {
        document.getElementById('addBookForm').classList.remove('hidden');
    });

    // 關閉按鈕事件
    document.querySelectorAll('.close-button').forEach(button => {
        button.addEventListener('click', (e) => {
            e.target.closest('.modal, .book-details').classList.add('hidden');
        });
    });

    // 點擊背景關閉模態框
    document.querySelectorAll('.modal, .book-details').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });
    });

    // 新增書籍表單提交事件
    document.getElementById('bookForm').addEventListener('submit', (e) => {
        e.preventDefault();
            const newBook = {
                id: books.length > 0 ? Math.max(...books.map(b => b.id)) + 1 : 1,
                period: parseInt(document.getElementById('bookPeriod').value),
                title: document.getElementById('bookTitle').value,
                author: document.getElementById('bookAuthor').value,
                presenter: document.getElementById('bookPresenter').value,
                summary: document.getElementById('bookSummary').value,
                reviews: []
            };        books.push(newBook);
        saveBooks();
        displayBooks();
        document.getElementById('addBookForm').classList.add('hidden');
        document.getElementById('bookForm').reset();
    });

    // 新增評論表單提交事件
    document.getElementById('reviewForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const bookId = parseInt(document.getElementById('reviewBookId').value);
        const book = books.find(b => b.id === bookId);
        
        if (book) {
            const linkValue = document.getElementById('reviewLink').value;
            
            const newReview = {
                id: book.reviews.length > 0 ? Math.max(...book.reviews.map(r => r.id)) + 1 : 1,
                reviewer: document.getElementById('reviewerName').value,
                comment: document.getElementById('reviewComment').value,
                fullReviewUrl: linkValue || null
            };
            
            book.reviews.push(newReview);
            saveBooks();
            showBookDetails(bookId);
            document.getElementById('addReviewForm').classList.add('hidden');
            document.getElementById('reviewForm').reset();
        }
    });

    // 評論刪除按鈕事件
    document.getElementById('bookDetails').addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-review-button')) {
            const bookId = parseInt(e.target.dataset.bookId);
            const reviewId = parseInt(e.target.dataset.reviewId);
            showConfirmDialog('確定要刪除這則評論嗎？', () => deleteReview(bookId, reviewId));
        }
    });

    // 確認對話框按鈕事件
    document.getElementById('confirmDelete').addEventListener('click', () => {
        if (typeof currentDeleteCallback === 'function') {
            currentDeleteCallback();
        }
        document.getElementById('confirmDialog').classList.add('hidden');
    });

    document.getElementById('cancelDelete').addEventListener('click', () => {
        document.getElementById('confirmDialog').classList.add('hidden');
    });
}

// 顯示確認對話框
function showConfirmDialog(message, callback) {
    const dialog = document.getElementById('confirmDialog');
    document.getElementById('confirmMessage').textContent = message;
    currentDeleteCallback = callback;
    dialog.classList.remove('hidden');
}

// 刪除書籍
function deleteBook(bookId) {
    const index = books.findIndex(b => b.id === bookId);
    if (index !== -1) {
        books.splice(index, 1);
        saveBooks();
        displayBooks();
        document.getElementById('bookDetails').classList.add('hidden');
    }
}

// 刪除評論
function deleteReview(bookId, reviewId) {
    const book = books.find(b => b.id === bookId);
    if (book) {
        const reviewIndex = book.reviews.findIndex(r => r.id === reviewId);
        if (reviewIndex !== -1) {
            book.reviews.splice(reviewIndex, 1);
            saveBooks();
            showBookDetails(bookId);
        }
    }
}

// 保存書籍資料到 localStorage
function saveBooks() {
    localStorage.setItem('books', JSON.stringify(books));
}

// 顯示書籍詳細資訊
function showBookDetails(bookId) {
    console.log('showBookDetails called with ID:', bookId);
    const book = books.find(b => b.id === bookId);
    
    if (!book) {
        console.error('Book not found with ID:', bookId);
        console.log('Available books:', books);
        return;
    }
    
    console.log('Found book:', book);
    
    const bookDetails = document.getElementById('bookDetails');
    console.log('Book details element:', bookDetails);
    
    if (!bookDetails) {
        console.error('Could not find bookDetails element');
        return;
    }

    try {
        const averageRating = calculateAverageRating(book.reviews);
        console.log('Average rating:', averageRating);
        
    const detailsContent = `
        <div class="book-details-content">
            <button class="close-button">&times;</button>
            <h2>${book.title}</h2>
            <p>作者：${book.author}</p>
            <p>出書人：${book.presenter}</p>
            <h3>讀者評價</h3>
            <div class="review-list">
                ${book.reviews.map(review => `
                    <div class="review-item">
                        <button class="delete-button delete-review-button" data-book-id="${book.id}" data-review-id="${review.id}">刪除</button>
                        <p>
                            <strong>${review.reviewer}</strong>
                        </p>
                        <p>${review.comment}</p>
                        ${review.fullReviewUrl ? `<a href="${review.fullReviewUrl}" target="_blank">閱讀完整心得</a>` : ''}
                    </div>
                `).join('')}
            </div>
            <button class="add-review-button" data-book-id="${book.id}">新增評論</button>
        </div>
    `;        console.log('Setting innerHTML');
        bookDetails.innerHTML = detailsContent;
        console.log('innerHTML set successfully');

        console.log('Removing hidden class');
        bookDetails.classList.remove('hidden');
        console.log('Hidden class removed');

        // 設置關閉按鈕事件
        const closeButton = bookDetails.querySelector('.close-button');
        console.log('Close button found:', closeButton);
        
        if (closeButton) {
            closeButton.addEventListener('click', (e) => {
                console.log('Close button clicked');
                e.stopPropagation();
                bookDetails.classList.add('hidden');
            });
        }

        // 點擊背景關閉
        bookDetails.addEventListener('click', (e) => {
            console.log('Background clicked', e.target);
            if (e.target === bookDetails) {
                console.log('Adding hidden class');
                bookDetails.classList.add('hidden');
            }
        });

        // 防止點擊內容區域時關閉
        const content = bookDetails.querySelector('.book-details-content');
        if (content) {
            content.addEventListener('click', (e) => {
                console.log('Content clicked');
                e.stopPropagation();
            });
        }

        // 新增評論按鈕事件
        const addReviewButton = bookDetails.querySelector('.add-review-button');
        console.log('Add review button found:', addReviewButton);
        
        if (addReviewButton) {
            addReviewButton.addEventListener('click', (e) => {
                console.log('Add review button clicked');
                e.stopPropagation();
                document.getElementById('reviewBookId').value = bookId;
                document.getElementById('addReviewForm').classList.remove('hidden');
            });
        }
        
        console.log('All event listeners set up successfully');
    } catch (error) {
        console.error('Error in showBookDetails:', error);
    }
}

    // 這部分已經在上面的 try-catch 區塊中處理過了
}